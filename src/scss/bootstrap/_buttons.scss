//
// Base styles
//

.btn {
  // scss-docs-start btn-css-vars
  --#{$prefix}btn-padding-x: 1.5rem;
  --#{$prefix}btn-padding-y: .25rem;
  --#{$prefix}btn-font-family: #{$btn-font-family};
  @include rfs($btn-font-size, --#{$prefix}btn-font-size);
  --#{$prefix}btn-font-weight: #{$btn-font-weight};
  --#{$prefix}btn-line-height: #{$btn-line-height};
  --#{$prefix}btn-color: #{$btn-color};
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-width: #{$btn-border-width};
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-border-radius: #{$btn-border-radius};
  --#{$prefix}btn-hover-border-color: transparent;
  --#{$prefix}btn-box-shadow: #{$btn-box-shadow};
  --#{$prefix}btn-disabled-opacity: #{$btn-disabled-opacity};
  --#{$prefix}btn-focus-box-shadow: 0 0 0 #{$btn-focus-width} rgba(var(--#{$prefix}btn-focus-shadow-rgb), .5);
  --#{$prefix}btn-icon-size: 1.25rem;
  --#{$prefix}btn-icon-color: var(--#{$prefix}btn-color);
  --#{$prefix}btn-hover-icon-color: var(--#{$prefix}btn-hover-color);
  --#{$prefix}btn-active-icon-color: var(--#{$prefix}btn-active-color);
  // scss-docs-end btn-css-vars

  height: 2.25rem;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: .5rem;
  padding: var(--#{$prefix}btn-padding-y) var(--#{$prefix}btn-padding-x);
  font-family: var(--#{$prefix}btn-font-family);
  @include font-size(var(--#{$prefix}btn-font-size));
  font-weight: var(--#{$prefix}btn-font-weight);
  line-height: var(--#{$prefix}btn-line-height);
  color: var(--#{$prefix}btn-color);
  text-align: center;
  text-decoration: if($link-decoration == none, null, none);
  white-space: $btn-white-space;
  vertical-align: middle;
  cursor: if($enable-button-pointers, pointer, null);
  user-select: none;
  border: var(--#{$prefix}btn-border-width) solid var(--#{$prefix}btn-border-color);
  @include border-radius(var(--#{$prefix}btn-border-radius));
  @include gradient-bg(var(--#{$prefix}btn-bg));
  @include box-shadow(var(--#{$prefix}btn-box-shadow));
  @include transition($btn-transition);

  @include media-breakpoint-up(lg) {
    --#{$prefix}btn-padding-x: #{$btn-padding-x};
    --#{$prefix}btn-padding-y: #{$btn-padding-y};
    --#{$prefix}btn-font-size: #{map-get($font-sizes, '20px')};
    --#{$prefix}btn-icon-size: 1.5rem;

    height: 3.75rem;
  }

  @media (hover: hover) {

    &:hover {
      color: var(--#{$prefix}btn-hover-color);
      text-decoration: if($link-hover-decoration == underline, none, null);
      background-color: var(--#{$prefix}btn-hover-bg);
      border-color: var(--#{$prefix}btn-hover-border-color);

      .icon {
        --_color: var(--#{$prefix}btn-hover-icon-color);
      }
    }

    .btn-check + &:hover {
      // override for the checkbox/radio buttons
      color: var(--#{$prefix}btn-color);
      background-color: var(--#{$prefix}btn-bg);
      border-color: var(--#{$prefix}btn-border-color);

      .icon {
        --_color: var(--#{$prefix}btn-hover-icon-color);
      }
    }
  }

  &:focus-visible {
    color: var(--#{$prefix}btn-hover-color);
    @include gradient-bg(var(--#{$prefix}btn-hover-bg));
    border-color: var(--#{$prefix}btn-hover-border-color);
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    } @else {
      box-shadow: var(--#{$prefix}btn-focus-box-shadow);
    }

    .icon {
      --_color: var(--#{$prefix}btn-active-icon-color);
    }
  }

  .btn-check:focus-visible + & {
    border-color: var(--#{$prefix}btn-hover-border-color);
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--#{$prefix}btn-box-shadow), var(--#{$prefix}btn-focus-box-shadow);
    } @else {
      box-shadow: var(--#{$prefix}btn-focus-box-shadow);
    }

    .icon {
      --_color: var(--#{$prefix}btn-active-icon-color);
    }
  }

  .icon {
    --_size: var(--#{$prefix}btn-icon-size);
    --_color: var(--#{$prefix}btn-icon-color);
  }

  .btn-check:checked + &,
  :not(.btn-check) + &:active,
  &:first-child:active,
  &.active,
  &.show {
    color: var(--#{$prefix}btn-active-color);
    background-color: var(--#{$prefix}btn-active-bg);
    // Remove CSS gradients if they're enabled
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-active-border-color);
    @include box-shadow(var(--#{$prefix}btn-active-shadow));

    .icon {
      --_color: var(--#{$prefix}btn-active-icon-color);
    }

    &:focus-visible {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows {
        box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
      } @else {
        box-shadow: var(--#{$prefix}btn-focus-box-shadow);
      }

      .icon {
        --_color: var(--#{$prefix}btn-active-icon-color);
      }
    }
  }

  .btn-check:checked:focus-visible + & {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: var(--#{$prefix}btn-active-shadow), var(--#{$prefix}btn-focus-box-shadow);
    } @else {
      box-shadow: var(--#{$prefix}btn-focus-box-shadow);
    }

    .icon {
      --_color: var(--#{$prefix}btn-active-icon-color);
    }
  }

  &:disabled,
  &.disabled,
  fieldset:disabled & {
    color: var(--#{$prefix}btn-disabled-color);
    pointer-events: none;
    background-color: var(--#{$prefix}btn-disabled-bg);
    background-image: if($enable-gradients, none, null);
    border-color: var(--#{$prefix}btn-disabled-border-color);
    opacity: var(--#{$prefix}btn-disabled-opacity);
    @include box-shadow(none);
  }
}


//
// Alternate buttons
//

// scss-docs-start btn-variant-loops
@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @if $color == "light" {
      @include button-variant(
        $background: $white,
        $border: $gray-500,
        $color: $gray-800,
        $hover-background: $white,
        $hover-border: $primary,
        $hover-color: $gray-800,
        $active-background: $white,
        $active-border: $primary,
        $active-color: $gray-800
      );
    } @else if $color == "dark" {
      @include button-variant(
        $value,
        $value,
        $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
        $hover-border: tint-color($value, $btn-hover-border-tint-amount),
        $active-background: tint-color($value, $btn-active-bg-tint-amount),
        $active-border: tint-color($value, $btn-active-border-tint-amount)
      );
    } @else if $color == "primary" {
      @include button-variant(
        $value,
        $value,
        $hover-background: $primary,
        $hover-border: $primary,
        $hover-color: $white,
        $active-background: $primary,
        $active-border: $primary,
        $active-color: $white
      );
    } @else if $color == "transparent" {
      @include button-variant(
        $background: map-get($theme-colors, 'transparent'),
        $border: map-get($theme-colors, 'transparent'),
        $color: $gray-800,
        $hover-background: map-get($theme-colors, 'transparent'),
        $hover-border: map-get($theme-colors, 'transparent'),
        $hover-color: $primary,
        $active-background: map-get($theme-colors, 'transparent'),
        $active-border: map-get($theme-colors, 'transparent'),
        $active-color: $primary
      );
    } @else {
      @include button-variant($value, $value);
    }

    @media (hover: hover) {
      &:hover {
        opacity: .8;
      }
    }

		&:focus-visible,
		&:active {
			opacity: .8;
		}

    &:focus-visible,
		&:active {
      transform: scale(.9375);
    }
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant($value);

    @media (hover: hover) {
      &:hover {
        box-shadow: inset 0 0 0 1px rgba($value, 1);
      }
    }

    &:focus-visible,
    &:first-child:active,
    &:active {
      box-shadow: inset 0 0 0 1px rgba($value, 1);
    }

    &:focus-visible,
    &:active {
      transform: scale(.9375);
    }
  }
}

@each $color, $value in $theme-colors {
  .btn-lg-#{$color} {
    @include media-breakpoint-up(lg) {
      @if $color == "light" {
        @include button-variant(
          $background: $white,
          $border: $gray-500,
          $color: $gray-800,
          $hover-background: $white,
          $hover-border: $primary,
          $hover-color: $gray-800,
          $active-background: $white,
          $active-border: $primary,
          $active-color: $gray-800
        );
      } @else if $color == "dark" {
        @include button-variant(
          $value,
          $value,
          $hover-background: tint-color($value, $btn-hover-bg-tint-amount),
          $hover-border: tint-color($value, $btn-hover-border-tint-amount),
          $active-background: tint-color($value, $btn-active-bg-tint-amount),
          $active-border: tint-color($value, $btn-active-border-tint-amount)
        );
      } @else if $color == "transparent" {
        @include button-variant(
          $background: map-get($theme-colors, 'transparent'),
          $border: map-get($theme-colors, 'transparent'),
          $color: $gray-800,
          $hover-background: map-get($theme-colors, 'transparent'),
          $hover-border: map-get($theme-colors, 'transparent'),
          $hover-color: $primary,
          $active-background: map-get($theme-colors, 'transparent'),
          $active-border: map-get($theme-colors, 'transparent'),
          $active-color: $primary
        );
      } @else {
        @include button-variant($value, $value);
      }
    }
  }

  .btn-outline-lg-#{$color} {
    @include media-breakpoint-up(lg) {
      @include button-outline-variant($value);
    }
  }
}
// scss-docs-end btn-variant-loops


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  --#{$prefix}btn-font-weight: #{$font-weight-normal};
  --#{$prefix}btn-color: #{$btn-link-color};
  --#{$prefix}btn-bg: transparent;
  --#{$prefix}btn-border-color: transparent;
  --#{$prefix}btn-hover-color: #{$btn-link-hover-color};
  --#{$prefix}btn-hover-border-color: transparent;
  --#{$prefix}btn-active-color: #{$btn-link-hover-color};
  --#{$prefix}btn-active-border-color: transparent;
  --#{$prefix}btn-disabled-color: #{$btn-link-disabled-color};
  --#{$prefix}btn-disabled-border-color: transparent;
  --#{$prefix}btn-box-shadow: ; // Can't use `none` as keyword negates all values when used with multiple shadows
  --#{$prefix}btn-focus-shadow-rgb: #{$btn-link-focus-shadow-rgb};

  text-decoration: $link-decoration;
  @if $enable-gradients {
    background-image: none;
  }

  @media (hover: hover) {

    &:hover,
    &:focus-visible {
      text-decoration: $link-hover-decoration;

      .icon {
        --_color: var(--#{$prefix}btn-hover-icon-color);
      }
    }
  }

  &:focus-visible {
    color: var(--#{$prefix}btn-color);

    .icon {
      --_color: var(--#{$prefix}btn-active-icon-color);
    }
  }

  &:hover {
    color: var(--#{$prefix}btn-hover-color);
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  @include button-size($btn-padding-y-lg, $btn-padding-x-lg, $btn-font-size, $btn-border-radius-lg);

  @include media-breakpoint-up(lg) {
    @include rfs(map-get($font-sizes, '20px'), --#{$prefix}btn-font-size);

    height: 4.75rem;
  }
}

.btn-sm {
  @include button-size($btn-padding-y-sm, $btn-padding-x-sm, $btn-font-size-sm, $btn-border-radius-sm);
}


//
// Button Custom
//
.btn-plaintext {
  --#{$prefix}btn-border-width: 0rem;
  --#{$prefix}btn-border-radius: 0rem;
  --#{$prefix}btn-padding-y: 0rem;
  --#{$prefix}btn-padding-x: 0rem;

  --#{$prefix}btn-hover-color: var(--#{$prefix}primary);
  --#{$prefix}btn-active-color: var(--#{$prefix}primary);

  height: initial;

  &.btn-primary {
    --#{$prefix}btn-color: var(--#{$prefix}primary);
    --#{$prefix}btn-hover-color: var(--#{$prefix}btn-color);
    --#{$prefix}btn-active-color: var(--#{$prefix}btn-color);

    --#{$prefix}btn-bg: transparent;
    --#{$prefix}btn-hover-bg: var(--#{$prefix}btn-bg);
    --#{$prefix}btn-active-bg: var(--#{$prefix}btn-bg);
  }

  @media (hover: hover) {
    &:hover {
      box-shadow: unset;
    }
  }

  &:focus-visible,
  &:first-child:active,
  &:active {
    box-shadow: unset;
  }

  &:focus-visible,
  &:active {
    transform: unset;
  }
}

.btn-more {

  &[aria-expanded="true"] {

    .icon {
      transform: rotate(180deg);
    }
  }
}

.btn-psy {
  --#{$prefix}btn-border-radius: 0rem;
  --#{$prefix}btn-padding-y: 0rem;
  --#{$prefix}btn-padding-x: 0rem;

  --#{$prefix}btn-hover-color: var(--#{$prefix}primary);
  --#{$prefix}btn-active-color: var(--#{$prefix}primary);

  height: initial;
  justify-content: initial;
  text-align: start;

  @include media-breakpoint-up(lg) {
    --#{$prefix}btn-border-width: .0625rem;
    --#{$prefix}btn-border-radius: 2.5rem;
    --#{$prefix}btn-padding-y: .75rem;
    --#{$prefix}btn-padding-x: 1.25rem;

    --#{$prefix}btn-hover-border-color: rgba(var(--#{$prefix}primary-rgb), .4);
    --#{$prefix}btn-active-border-color: rgba(var(--#{$prefix}primary-rgb), .4);
  }
}
